#!/usr/bin/env python3
"""
Plot Repository Commit Utility

Commits experiment plots to the repository for easy browser access.
Organizes plots by date and experiment type, with automatic cleanup.
"""

import argparse
import os
import shutil
import subprocess
import sys
from datetime import datetime, timedelta
from pathlib import Path
from typing import List, Optional


def run_git_command(args: List[str], cwd: Optional[str] = None) -> bool:
    """Run a git command safely."""
    try:
        result = subprocess.run(
            ["git"] + args,
            cwd=cwd,
            capture_output=True,
            text=True,
            check=True
        )
        return True
    except subprocess.CalledProcessError as e:
        print(f"Git command failed: {e}")
        print(f"Output: {e.stdout}")
        print(f"Error: {e.stderr}")
        return False


def setup_git_config():
    """Configure git for CI environment."""
    commands = [
        ["config", "user.name", "GitHub Actions"],
        ["config", "user.email", "actions@github.com"],
        ["config", "core.autocrlf", "false"]
    ]

    for cmd in commands:
        if not run_git_command(cmd):
            print(f"Failed to configure git: {cmd}")
            return False
    return True


def copy_plots_to_repository(
    source_dir: str,
    plots_dir: str,
    experiment_type: str,
    date_str: Optional[str] = None
) -> List[str]:
    """Copy plots from source directory to repository plots structure."""
    if date_str is None:
        date_str = datetime.now().strftime("%Y-%m-%d")

    # Create target directory
    target_dir = Path(plots_dir) / date_str / experiment_type
    target_dir.mkdir(parents=True, exist_ok=True)

    copied_files = []
    source_path = Path(source_dir)

    # Common plot file patterns
    plot_patterns = [
        "*.png", "*.jpg", "*.jpeg", "*.svg", "*.pdf",
        "*.html"  # For interactive plots
    ]

    for pattern in plot_patterns:
        for plot_file in source_path.rglob(pattern):
            # Skip matplotlib cache and temp files
            if ".matplotlib" in str(plot_file) or "temp" in plot_file.name.lower():
                continue

            target_file = target_dir / plot_file.name

            # Handle name conflicts by adding suffix
            counter = 1
            original_target = target_file
            while target_file.exists():
                stem = original_target.stem
                suffix = original_target.suffix
                target_file = target_dir / f"{stem}_{counter}{suffix}"
                counter += 1

            try:
                shutil.copy2(plot_file, target_file)
                copied_files.append(str(target_file.relative_to(plots_dir)))
                print(f"Copied: {plot_file.name} -> {target_file.relative_to(plots_dir)}")
            except Exception as e:
                print(f"Failed to copy {plot_file}: {e}")

    return copied_files


def cleanup_old_plots(plots_dir: str, retention_days: int = 30):
    """Remove plots older than retention period."""
    cutoff_date = datetime.now() - timedelta(days=retention_days)
    plots_path = Path(plots_dir)
    removed_dirs = []

    for date_dir in plots_path.iterdir():
        if not date_dir.is_dir():
            continue

        try:
            # Parse date from directory name (YYYY-MM-DD format)
            dir_date = datetime.strptime(date_dir.name, "%Y-%m-%d")
            if dir_date < cutoff_date:
                shutil.rmtree(date_dir)
                removed_dirs.append(date_dir.name)
                print(f"Cleaned up old plots: {date_dir.name}")
        except ValueError:
            # Skip directories that don't match date format
            continue

    return removed_dirs


def commit_plots(plots_dir: str, experiment_type: str, copied_files: List[str]) -> bool:
    """Commit the new plots to git."""
    if not copied_files:
        print("No plots to commit")
        return True

    # Add the plots directory to git
    if not run_git_command(["add", plots_dir]):
        return False

    # Check if there are changes to commit
    result = subprocess.run(
        ["git", "diff", "--cached", "--quiet"],
        capture_output=True
    )

    if result.returncode == 0:
        print("No changes to commit")
        return True

    # Create commit message
    commit_msg = f"feat(plots): add {experiment_type} experiment plots\n\n"
    commit_msg += f"Added {len(copied_files)} plot files:\n"
    for file in copied_files[:5]:  # Limit to first 5 files
        commit_msg += f"- {file}\n"
    if len(copied_files) > 5:
        commit_msg += f"... and {len(copied_files) - 5} more files\n"

    commit_msg += "\nGenerated by automated CI workflow"

    # Commit the changes
    return run_git_command(["commit", "-m", commit_msg])


def main():
    parser = argparse.ArgumentParser(
        description="Commit experiment plots to repository"
    )
    parser.add_argument(
        "--source_dir",
        required=True,
        help="Source directory containing plots"
    )
    parser.add_argument(
        "--plots_dir",
        default="plots",
        help="Target plots directory in repository"
    )
    parser.add_argument(
        "--experiment_type",
        required=True,
        help="Type of experiment (e.g., fedprox-nightly)"
    )
    parser.add_argument(
        "--date",
        help="Date string (YYYY-MM-DD), defaults to today"
    )
    parser.add_argument(
        "--retention_days",
        type=int,
        default=30,
        help="Days to keep old plots"
    )
    parser.add_argument(
        "--skip_commit",
        action="store_true",
        help="Copy plots but don't commit to git"
    )

    args = parser.parse_args()

    # Validate source directory
    if not Path(args.source_dir).exists():
        print(f"Source directory does not exist: {args.source_dir}")
        return 1

    # Setup git configuration
    if not args.skip_commit and not setup_git_config():
        print("Failed to setup git configuration")
        return 1

    # Copy plots to repository
    print(f"Copying plots from {args.source_dir} to {args.plots_dir}")
    copied_files = copy_plots_to_repository(
        args.source_dir,
        args.plots_dir,
        args.experiment_type,
        args.date
    )

    if not copied_files:
        print("No plots found to copy")
        return 0

    # Cleanup old plots
    print(f"Cleaning up plots older than {args.retention_days} days")
    cleanup_old_plots(args.plots_dir, args.retention_days)

    # Commit to git
    if not args.skip_commit:
        print("Committing plots to repository")
        if not commit_plots(args.plots_dir, args.experiment_type, copied_files):
            print("Failed to commit plots")
            return 1
        print("Successfully committed plots to repository")

    print(f"Operation completed: {len(copied_files)} files processed")
    return 0


if __name__ == "__main__":
    sys.exit(main())